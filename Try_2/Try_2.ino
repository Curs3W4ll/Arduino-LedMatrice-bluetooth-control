// Include the required Arduino libraries:
#include "LedControl.h"

byte testing[] =
{
   B10000000,
   B10000000,
   B10000000,
   B10000000,
   B10000000,
   B00000000,
   B10000000,
   B00000000
   /*
   B,
   B,
   B,
   B,
   B,
   B,
   B,
   B


   B00000000,
   B01100110,
   B01100110,
   B00000000,
   B00000000,
   B10000001,
   B01000010,
   B00111100
    */
};
byte ascii[][8] =
{{
   B10000000,
   B10000000,
   B10000000,
   B10000000,
   B10000000,
   B00000000,
   B10000000,
   B00000000
   //--!--//
},
{
   B00000000,
   B10100000,
   B10100000,
   B01010000,
   B00000000,
   B00000000,
   B00000000,
   B00000000
   //--"--//
},
{
   B00000000,
   B01010000,
   B11111000,
   B01010000,
   B01010000,
   B11111000,
   B01010000,
   B00000000
   //--#--//
},
{
   B00000000,
   B00100000,
   B01111000,
   B10100000,
   B01110000,
   B00101000,
   B11110000,
   B00100000
   //--$--//
},
{
   B00000000,
   B00000000,
   B01100100,
   B01101000,
   B00010000,
   B00101100,
   B01001100,
   B00000000
   //--%--//
},
{
   B00000000,
   B00010000,
   B00101000,
   B00101000,
   B00010000,
   B00101010,
   B00100100,
   B00011010
   //--&--//
},
{
   B00000000,
   B00010000,
   B00010000,
   B00100000,
   B00000000,
   B00000000,
   B00000000,
   B00000000
   //--'--//
},
{
   B00100000,
   B01000000,
   B01000000,
   B01000000,
   B01000000,
   B01000000,
   B01000000,
   B00100000
   //--(--//
},
{
   B01000000,
   B00100000,
   B00100000,
   B00100000,
   B00100000,
   B00100000,
   B00100000,
   B01000000
   //--)--//
},
{
   B00000000,
   B00000000,
   B00000000,
   B01010000,
   B00100000,
   B01010000,
   B00000000,
   B00000000
   //--*--//
},
{
   B00000000,
   B00000000,
   B00100000,
   B00100000,
   B11111000,
   B00100000,
   B00100000,
   B00000000
   //--+--//
},
{
   B00000000,
   B00000000,
   B00000000,
   B00000000,
   B00000000,
   B00100000,
   B00100000,
   B01000000
   //--,--//
},
{
   B00000000,
   B00000000,
   B00000000,
   B00000000,
   B11111000,
   B00000000,
   B00000000,
   B00000000
   //-----//
},
{
   B00000000,
   B00000000,
   B00000000,
   B00000000,
   B00000000,
   B00000000,
   B00011000,
   B00011000
   //--.--//
},
{
   B00000000,
   B00000100,
   B00001000,
   B00001000,
   B00010000,
   B00010000,
   B00100000,
   B00000000
   //--/--//
},
{
   B00000000,
   B00000000,
   B00011000,
   B00011000,
   B00000000,
   B00011000,
   B00011000,
   B00000000
   //--:--//
},
{
   B00000000,
   B00000000,
   B00100000,
   B00000000,
   B00100000,
   B00100000,
   B01000000,
   B00000000
   //--;--//
},
{
   B00000000,
   B00000000,
   B00010000,
   B00100000,
   B01000000,
   B00100000,
   B00010000,
   B00000000
   //--<--//
},
{
   B00000000,
   B00000000,
   B00000000,
   B01111000,
   B00000000,
   B01111000,
   B00000000,
   B00000000
   //--=--//
},
{
   B00000000,
   B00000000,
   B01000000,
   B00100000,
   B00010000,
   B00100000,
   B01000000,
   B00000000
   //-->--//
},
{
   B00000000,
   B00111000,
   B01000100,
   B00000100,
   B00001000,
   B00010000,
   B00000000,
   B00010000
   //--?--//
},
{
   B00000000,
   B00111000,
   B01000100,
   B01011100,
   B01010100,
   B01011100,
   B01000000,
   B00111100
   //--@--//
},
{
   B01100000,
   B01000000,
   B01000000,
   B01000000,
   B01000000,
   B01000000,
   B01000000,
   B01100000
   //--[--//
},
{
   B00000000,
   B01000000,
   B00100000,
   B00100000,
   B00010000,
   B00010000,
   B00001000,
   B00000000
   //--\--//
},
{
   B01100000,
   B00100000,
   B00100000,
   B00100000,
   B00100000,
   B00100000,
   B00100000,
   B01100000
   //--]--//
},
{
   B00010000,
   B00101000,
   B01000100,
   B00000000,
   B00000000,
   B00000000,
   B00000000,
   B00000000
   //--^--//
},
{
   B00000000,
   B00000000,
   B00000000,
   B00000000,
   B00000000,
   B00000000,
   B00000000,
   B00111100
   //--_--//
},
{
   B00011000,
   B00100000,
   B00100000,
   B01000000,
   B00100000,
   B00100000,
   B00100000,
   B00011000
   //--{--//
},
{
   B01000000,
   B01000000,
   B01000000,
   B01000000,
   B01000000,
   B01000000,
   B01000000,
   B01000000
   //--|--//
},
{
   B01100000,
   B00010000,
   B00010000,
   B00001000,
   B00010000,
   B00010000,
   B00010000,
   B01100000
   //--}--//
}};
byte alphabet_mini[][8] =
{{
   B00000000,
   B00000000,
   B00111000,
   B00000100,
   B00111100,
   B01000100,
   B01000100,
   B00111100
   //--a--//
},
{
   B00000000,
   B00100000,
   B00100000,
   B00100000,
   B00111000,
   B00100100,
   B00100100,
   B00111000
   //--b--//
},
{
   B00000000,
   B00000000,
   B00000000,
   B00011000,
   B00100100,
   B00100000,
   B00100100,
   B00011000
   //--c--//
},
{
   B00000000,
   B00000100,
   B00000100,
   B00000100,
   B00011100,
   B00100100,
   B00100100,
   B00011100
   //--d--//
},
{
   B00000000,
   B00000000,
   B00000000,
   B00011000,
   B00100100,
   B00111100,
   B00100000,
   B00011100
   //--e--//
},
{
   B00000000,
   B00001100,
   B00010000,
   B00010000,
   B00111100,
   B00010000,
   B00010000,
   B00010000
   //--f--//
},
{
   B00000000,
   B00000000,
   B00011100,
   B00100100,
   B00100100,
   B00011100,
   B00000100,
   B00111000
   //--g--//
},
{
   B00000000,
   B01000000,
   B01000000,
   B01000000,
   B01110000,
   B01001000,
   B01001000,
   B01001000
   //--h--//
},
{
   B00000000,
   B00000000,
   B00000000,
   B00001000,
   B00000000,
   B00001000,
   B00001000,
   B00001000
   //--i--//
},
{
   B00000000,
   B00000100,
   B00000000,
   B00000100,
   B00000100,
   B00000100,
   B00100100,
   B00011000
   //--j--//
},
{
   B00000000,
   B00100000,
   B00100100,
   B00100100,
   B00111000,
   B00100100,
   B00100100,
   B00100100
   //--k--//
},
{
   B00000000,
   B00010000,
   B00010000,
   B00010000,
   B00010000,
   B00010000,
   B00010000,
   B00010000
   //--l--//
},
{
   B00000000,
   B00000000,
   B00000000,
   B00000000,
   B01111000,
   B01010100,
   B01010100,
   B01010100
   //--m--//
},
{
   B00000000,
   B00000000,
   B00000000,
   B00000000,
   B00111000,
   B00100100,
   B00100100,
   B00100100
   //--n--//
},
{
   B00000000,
   B00000000,
   B00000000,
   B00011000,
   B00100100,
   B00100100,
   B00100100,
   B00011000
   //--o--//
},
{
   B00000000,
   B00111000,
   B00100100,
   B00100100,
   B00111000,
   B00100000,
   B00100000,
   B00100000
   //--p--//
},
{
   B00000000,
   B00011100,
   B00100100,
   B00100100,
   B00011100,
   B00000100,
   B00000100,
   B00000100
   //--q--//
},
{
   B00000000,
   B00000000,
   B00000000,
   B00000000,
   B00011000,
   B00100100,
   B00100000,
   B00100000
   //--r--//
},
{
   B00000000,
   B00000000,
   B00000000,
   B00011100,
   B00100000,
   B00011000,
   B00000100,
   B00111000
   //--s--//
},
{
   B00000000,
   B00010000,
   B00010000,
   B00111100,
   B00010000,
   B00010000,
   B00010000,
   B00001100
   //--t--//
},
{
   B00000000,
   B00000000,
   B00000000,
   B00000000,
   B00100100,
   B00100100,
   B00100100,
   B00011100
   //--u--//
},
{
   B00000000,
   B00000000,
   B00000000,
   B00000000,
   B00100100,
   B00100100,
   B00100100,
   B00011000
   //--v--//
},
{
   B00000000,
   B00000000,
   B00000000,
   B00000000,
   B01000100,
   B01000100,
   B01010100,
   B00101000
   //--w--//
},
{
   B00000000,
   B00000000,
   B00000000,
   B00100100,
   B00100100,
   B00011000,
   B00100100,
   B00100100
   //--x--//
},
{
   B00000000,
   B00000000,
   B00000000,
   B00100100,
   B00100100,
   B00011100,
   B00000100,
   B00111000
   //--y--//
},
{
   B00000000,
   B00000000,
   B00111100,
   B00000100,
   B00001000,
   B00010000,
   B00100000,
   B00111100
   //--z--//
}};
byte chiffres[][8] =
{{
   B00000000,
   B11111000,
   B10001000,
   B10001000,
   B10001000,
   B10001000,
   B10001000,
   B11111000
   //--0--//
},
{
   B00000000,
   B01000000,
   B11000000,
   B01000000,
   B01000000,
   B01000000,
   B01000000,
   B01000000
   //--1--//
},
{
   B00000000,
   B01111100,
   B00000100,
   B00000100,
   B01111100,
   B01000000,
   B01000000,
   B01111100
   //--2--//
},
{
   B00000000,
   B00111100,
   B00000100,
   B00000100,
   B00111100,
   B00000100,
   B00000100,
   B00111100
   //--3--//
},
{
   B00000000,
   B01000100,
   B01000100,
   B01000100,
   B01111100,
   B00000100,
   B00000100,
   B00000100
   //--4--//
},
{
   B00000000,
   B01111100,
   B01000000,
   B01000000,
   B01111100,
   B00000100,
   B00000100,
   B01111100
   //--5--//
},
{
   B00000000,
   B01111100,
   B01000000,
   B01000000,
   B01111100,
   B01000100,
   B01000100,
   B01111100
   //--6--//
},
{
   B00000000,
   B01111100,
   B00000100,
   B00000100,
   B00001000,
   B00010000,
   B00010000,
   B00010000
   //--7--//
},
{
   B00000000,
   B01111100,
   B01000100,
   B01000100,
   B01111100,
   B01000100,
   B01000100,
   B01111100
   //--8--//
},
{
   B00000000,
   B01111100,
   B01000100,
   B01000100,
   B01111100,
   B00000100,
   B00000100,
   B01111100
   //--9--//
}};
byte alphabet[][8] =
{{
   B00000000,
   B00111000,
   B01000100,
   B01000100,
   B01000100,
   B01111100,
   B01000100,
   B01000100
   //--A--//
},
{
   B00000000,
   B01111000,
   B01000100,
   B01000100,
   B01111000,
   B01000100,
   B01000100,
   B01111000
   //--B--//
},
{
   B00000000,
   B00111000,
   B01000100,
   B01000000,
   B01000000,
   B01000000,
   B01000100,
   B00111000
   //--C--//
},
{
   B00000000,
   B01111000,
   B01000100,
   B01000100,
   B01000100,
   B01000100,
   B01000100,
   B01111000
   //--D--//
},
{
   B00000000,
   B01111100,
   B01000000,
   B01000000,
   B01111000,
   B01000000,
   B01000000,
   B01111100
   //--E--//
},
{
   B00000000,
   B01111100,
   B01000000,
   B01000000,
   B01111000,
   B01000000,
   B01000000,
   B01000000
   //--F--//
},
{
   B00000000,
   B00111000,
   B01000100,
   B01000000,
   B01000000,
   B01001100,
   B01000100,
   B00111000
   //--G--//
},
{
   B00000000,
   B01000100,
   B01000100,
   B01000100,
   B01111100,
   B01000100,
   B01000100,
   B01000100
   //--H--//
},
{
   B00000000,
   B00111000,
   B00010000,
   B00010000,
   B00010000,
   B00010000,
   B00010000,
   B00111000
   //--I--//
},
{
   B00000000,
   B00000100,
   B00000100,
   B00000100,
   B00000100,
   B01000100,
   B01000100,
   B00111000
   //--J--//
},
{
   B00000000,
   B01000100,
   B01001000,
   B01010000,
   B01100000,
   B01010000,
   B01001000,
   B01000100
   //--K--//
},
{
   B00000000,
   B01000000,
   B01000000,
   B01000000,
   B01000000,
   B01000000,
   B01000000,
   B01111000
   //--L--//
},
{
   B00000000,
   B01000100,
   B01101100,
   B01010100,
   B01000100,
   B01000100,
   B01000100,
   B01000100
   //--M--//
},
{
   B00000000,
   B01000100,
   B01100100,
   B01010100,
   B01010100,
   B01001100,
   B01000100,
   B01000100
   //--N--//
},
{
   B00000000,
   B00111000,
   B01000100,
   B01000100,
   B01000100,
   B01000100,
   B01000100,
   B00111000
   //--O--//
},
{
   B00000000,
   B01111000,
   B01000100,
   B01000100,
   B01000100,
   B01111000,
   B01000000,
   B01000000
   //--P--//
},
{
   B00000000,
   B00111000,
   B01000100,
   B01000100,
   B01000100,
   B01010100,
   B01001100,
   B00111100
   //--Q--//
},
{
   B00000000,
   B01111000,
   B01000100,
   B01000100,
   B01000100,
   B01111000,
   B01000100,
   B01000100
   //--R--//
},
{
   B00000000,
   B00111000,
   B01000100,
   B01000000,
   B00111000,
   B00000100,
   B01000100,
   B00111000
   //--S--//
},
{
   B00000000,
   B01111100,
   B00010000,
   B00010000,
   B00010000,
   B00010000,
   B00010000,
   B00010000
   //--T--//
},
{
   B00000000,
   B01000100,
   B01000100,
   B01000100,
   B01000100,
   B01000100,
   B01000100,
   B00111000
   //--U--//
},
{
   B00000000,
   B01000100,
   B01000100,
   B01000100,
   B01000100,
   B01000100,
   B00101000,
   B00010000
   //--V--//
},
{
   B00000000,
   B01000100,
   B01000100,
   B01000100,
   B01000100,
   B01010100,
   B01101100,
   B01000100
   //--W--//
},
{
   B00000000,
   B01000100,
   B01000100,
   B00101000,
   B00010000,
   B00101000,
   B01000100,
   B01000100
   //--X--//
},
{
   B00000000,
   B01000100,
   B01000100,
   B01000100,
   B00101000,
   B00010000,
   B00010000,
   B00010000
   //--Y--//
},
{
   B00000000,
   B01111100,
   B00000100,
   B00001000,
   B00010000,
   B00100000,
   B01000000,
   B01111100
   //--Z--//
}};
byte staticHearth[] =
{
   B01100110,
   B11111111,
   B11111111,
   B11111111,
   B01111110,
   B00111100,
   B00011000,
   B00000000
};
byte movingHearth[][8] =
{{
   B00000000,
   B01100110,
   B11111111,
   B11111111,
   B01111110,
   B00111100,
   B00011000,
   B00000000
},
{
   B01100110,
   B11111111,
   B11111111,
   B11111111,
   B11111111,
   B01111110,
   B00111100,
   B00011000
}};
byte smiley1[] =
{
   B00111100,
   B01000010,
   B10100101,
   B10000001,
   B10100101,
   B10011001,
   B01000010,
   B00111100
};
byte smiley2[] =
{
   B00000000,
   B01100110,
   B01100110,
   B00000000,
   B00000000,
   B10000001,
   B01000010,
   B00111100
};
byte damier[][8] =
{{
   B10101010,
   B01010101,
   B10101010,
   B01010101,
   B10101010,
   B01010101,
   B10101010,
   B01010101
},
{
   B01010101,
   B10101010,
   B01010101,
   B10101010,
   B01010101,
   B10101010,
   B01010101,
   B10101010
}};
byte pluie[][8] =
{{
   B01010001,
   B01000000,
   B00000000,
   B00000100,
   B00000100,
   B00000100,
   B00010001,
   B01010001
},
{
   B01010001,
   B01010001,
   B01000000,
   B00000000,
   B00000100,
   B00000100,
   B00000100,
   B00010001
},
{
   B00010001,
   B01010001,
   B01010001,
   B01000000,
   B00000000,
   B00000100,
   B00000100,
   B00000100
},
{
   B00000100,
   B00010001,
   B01010001,
   B01010001,
   B01000000,
   B00000000,
   B00000100,
   B00000100
},
{
   B00000100,
   B00000100,
   B00010001,
   B01010001,
   B01010001,
   B01000000,
   B00000000,
   B00000100
},
{
   B00000100,
   B00000100,
   B00000100,
   B00010001,
   B01010001,
   B01010001,
   B01000000,
   B00000000
},
{
   B00000000,
   B00000100,
   B00000100,
   B00000100,
   B00010001,
   B01010001,
   B01010001,
   B01000000
},
{
   B01000000,
   B00000000,
   B00000100,
   B00000100,
   B00000100,
   B00010001,
   B01010001,
   B01010001
}};

unsigned long previousTime = 0;
unsigned long currentTime = 0;

int rowCounter =0; // row counter
int columnCounter =0; // column counter
int foundColumn = 0;
boolean foundCol = false;
int keyValue = 4;
int noKey = 0;
boolean readKey = false;
int debounce = 300; // set this to the lowest value that gives the best result
const int row1 = 10;
const int row2 = 11;
const int row3 = 12;
const int row4 = 13;
const int colA = 6;
const int colB = 7;
const int colC = 8;
const int colD = 9;

// Define hardware type, size, and output pins:
#define MAX_DEVICES 4
#define CS_PIN 3
#define DIN_PIN 2
#define CLK_PIN 4

LedControl lc=LedControl(DIN_PIN,CLK_PIN,CS_PIN,MAX_DEVICES);


void scanRow(){
  for(int j =row1; j < (row4 +1); j++){
    digitalWrite(j, HIGH);
  }
  digitalWrite(rowCounter , LOW); // switch on one row
}
void readColumn(){
  foundColumn = digitalRead(columnCounter);
  if(foundColumn == 0){
    foundCol = true;
  }
  else{
    foundCol=false;
    noKey=noKey +1; // counter for number of empty columns
  }
} //[Button 4x4 matrix]

void setup() {
  for (int i = 0; i < 4; i++) {
    lc.shutdown(i,false);  // Wake up displays
    lc.setIntensity(i,1);  // Set intensity levels
    lc.clearDisplay(i);  // Clear Displays
  }
  
  Serial.begin(9600);
  pinMode(row1, OUTPUT);
  pinMode(row2, OUTPUT);
  pinMode(row3, OUTPUT);
  pinMode(row4, OUTPUT);
  pinMode(colA, INPUT_PULLUP);
  pinMode(colB, INPUT_PULLUP);
  pinMode(colC, INPUT_PULLUP);
  pinMode(colD, INPUT_PULLUP); //[Button 4x4 matrix]
}

void loop() {
  for (int i = 0; i < 8; i++)
  {
    lc.setRow(2,i,testing[i]);
  }
  
  currentTime = millis();
  if(noKey == 16){ // no keys were pressed
    readKey = true; // keyboard is ready to accept a new keypress
  }
  noKey = 0;
  for(rowCounter=row1; rowCounter<(row4 +1); rowCounter++){
    scanRow(); // switch on one row at a time
    for(columnCounter = colA; columnCounter <colD +1; columnCounter++){
      readColumn(); // read the switch pressed
      if (foundCol== true){
        keyValue =(rowCounter-row1) +4*(columnCounter - colA);
      }
    }
  }
  if(readKey==true && noKey == 15){ // a key has been pressed
    Serial.println(keyValue); // used for debug
    Serial.println(currentTime);
  }

  switch(keyValue) {
    case 0:
      for (int i = 0; i < 8; i++)
      {
        lc.setRow(0,i,staticHearth[i]);
      }
      break;
    case 1:
      if (currentTime - previousTime > 400 && currentTime - previousTime < 800) {
        for (int i = 0; i < 8; i++) {
          lc.setRow(0,i,movingHearth[0][i]);
        }
      } else if (currentTime - previousTime > 800) {
        for (int i = 0; i < 8; i++) {
          lc.setRow(0,i,movingHearth[1][i]);
        }
        previousTime = currentTime;
      }
      break;
    case 2:
      for (int i = 0; i < 8; i++)
      {
        lc.setRow(0,i,smiley1[i]);
      }
      break;
    case 3:
      for (int i = 0; i < 8; i++)
      {
        lc.setRow(0,i,smiley2[i]);
      }
      break;
    case 4:
      for (int j = 0; j < 8; j++) {
        for (int i = 0; i < 8; i++) {
          lc.setRow(0,i,pluie[j][i]);
          lc.setRow(1,i,pluie[j][i]);
          lc.setRow(3,i,pluie[j][i]);
        }
        delay(50);
      }
      break;
    case 5:
      for (int j = 0; j < 2; j++) {
        for (int i = 0; i < 8; i++)
        {
          lc.setRow(0,i,damier[j][i]);
        }
        delay(200);
      }
      break;
    case 6:
      for (int j = 0; j < 26; j++) {
        for (int i = 0; i < 8; i++)
        {
          lc.setRow(0,i,alphabet[j][i]);
        }
        delay(500);
      }
      break;
    case 7:
      for (int j = 0; j < 10; j++) {
        for (int i = 0; i < 8; i++)
        {
          lc.setRow(0,i,chiffres[j][i]);
        }
        delay(500);
      }
      break;
    case 8:
      for (int j = 0; j < 26; j++) {
        for (int i = 0; i < 8; i++)
        {
          lc.setRow(0,i,alphabet_mini[j][i]);
        }
        delay(500);
      }
      break;
    case 9:
      for (int j = 0; j < 30; j++) {
        for (int i = 0; i < 8; i++)
        {
          lc.setRow(0,i,ascii[j][i]);
        }
        delay(500);
      }
      break;
    case 10:
      for (int i = 0; i < 8; i++)
      {
        lc.setRow(0,i,staticHearth[i]);
      }
      break;
    case 11:
      for (int i = 0; i < 8; i++)
      {
        lc.setRow(0,i,staticHearth[i]);
      }
      break;
    case 12:
      for (int i = 0; i < 8; i++)
      {
        lc.setRow(0,i,staticHearth[i]);
      }
      break;
    case 13:
      for (int i = 0; i < 8; i++)
      {
        lc.setRow(0,i,staticHearth[i]);
      }
      break;
    case 14:
      for (int i = 0; i < 8; i++)
      {
        lc.setRow(0,i,staticHearth[i]);
      }
      break;
    case 15:
      for (int i = 0; i < 8; i++)
      {
        lc.setRow(0,i,staticHearth[i]);
      }
      break;
  }
  
  readKey = false; //[Button 4x4 matrix]
}
